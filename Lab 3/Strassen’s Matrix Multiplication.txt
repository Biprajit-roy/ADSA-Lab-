Strassen’s Matrix Multiplication:

Normal matrix multiplication takes O(n³) operations.
Strassen’s algorithm reduces it to about O(n^2.81) by reducing the number of recursive multiplications.

We multiply two n × n matrices using Strassen’s Algorithm. Strassen’s algorithm works cleanly only when n is a power of 2.
Example: 2×2, 4×4, 8×8 ...
In case n is not a power of 2 then:

we compute the next power of 2 ≥ n (using nextPowerOf2() function).

Create padded matrices of that size by filling extra rows/columns with zeros.

Perform Strassen multiplication.

Finally, take only the top-left n × n part as the result.


Instead of 8 recursive multiplications, Strassen reduces it to 7:
A = | A11  A12 |    B = | B11  B12 |
        | A21  A22 |           | B21  B22 |

M1 = (A11 + A22) * (B11 + B22)
M2 = (A21 + A22) * B11
M3 = A11 * (B12 - B22)
M4 = A22 * (B21 - B11)
M5 = (A11 + A12) * B22
M6 = (A21 - A11) * (B11 + B12)
M7 = (A12 - A22) * (B21 + B22)

The result matrix C is:

C11 = M1 + M4 - M5 + M7
C12 = M3 + M5
C21 = M2 + M4
C22 = M1 - M2 + M3 + M6

After computing C11, C12, C21, C22, we copy them into the correct positions in the final matrix C.

Then prints only the first n × n elements of C.



